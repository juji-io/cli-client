#!/usr/bin/env node


/*
 * parse command line argument
 */

var program = require('commander');

program
    .description('Upload a file to Juji for analysis. Reguire login or API key. See API doc at https://docs.google.com/spreadsheets/d/1T1zObl47vI3axgFCh8H9cs1TfuuZk714UrAUzUgk11Q for more details.')
    .arguments('<file>')
    .option('-v, --apiVersion [api-version]', 'Version of the personality analyze to use. By default the most recent version is used.')
    .option('-i, --inputType [input-type]', 'input type is json or csv', 'csv')
    .option('-a, --accept [accept]', 'Accept type is json or csv, only applicable for most recent api version', 'csv')
    .option('-q, --querystring [querystring]', 'Parameter for the request as querystring')
    .option('-k, --apiKey [api-key]', 'Use API key for authentication');

program.on('--help', function(){
    console.log('');
    console.log('Input:');
    console.log('  The input file name should have either .json or .csv suffix. They should have similar structure: csv file should have two columns, the first being an id column, and the second a text column, and there should be no header; json file should be a vector of objects, where each object has two fields, an \"id \" and a \"text\"');
    console.log('');
    console.log('Output:');
    console.log('  The output will be a csv file with a header, and column names are the name of traits. The output is printed directly to console.');
    console.log('');
    console.log('Examples:');
    console.log('  juji analyze mytext.csv');
    console.log('  juji analyze mytext.csv -k [apikey]');
    console.log('  juji analyze mytext.json -i json');
    console.log('  juji analyze mytext.json -i json -a json');
    console.log('  juji analyze mytext.json -i json -q \'big5_facets=true&soft_skills=true\'');    
    console.log('  juji analyze mytext.csv > result.csv');  
    console.log('  juji analyze mytext.csv -v 2020-01-02');
    console.log('  juji analyze mytext.json -v 2020-01-02 ');

});

program.parse(process.argv);

var args = program.args;

if (!args.length) {
    console.error('Input file is required');
    console.log('');
    program.outputHelp();
    process.exit(1);
}

var input = args[0];


/*
 * check permission
 */

const Preferences = require('preferences');

const prefs = new Preferences('io.juji.client');

if (prefs.token == null) {
    console.error('Please \'juji login\' first')
    process.exit(1);
}


/*
 * send file for analysis
 */

const fs = require('fs');

const qs = require('qs');

const request = require('request');

// request differs between api version
const v3_realse_time = Date.parse('2021-12-01');

var apiVersion = program.apiVersion || '2022-12-10';

var propertiesObject = { version:apiVersion };

if ( program.querystring ) {
    propertiesObject = { 
        ...qs.parse(program.querystring),
        ...propertiesObject
    }
}

// console.log(propertiesObject);
var option = {
    url: prefs.analyzeUrl,
    qs:propertiesObject
};

var headers = {
        Accept: 'text/csv'
    };

if ( program.apiKey ) {
    option.auth = {
        'user': 'apikey',
        'pass': program.apiKey
    };
} else {
    headers.authorization = 'Bearer ' + prefs.token;
};



var returnType = 'csv';

if (  Date.parse(apiVersion) < v3_realse_time ) {
    option.formData = {
        file: fs.createReadStream(input)
    };
} else {
    if ( program.inputType == 'json' ) {
        option.json = true;
        option.body = require(input);
    } else {
        headers['Content-Type'] = 'text/csv';
        option.body = fs.createReadStream(input);
    };
    if ( program.accept == 'json' ) {
        headers.Accept = 'application/json';
        returnType = 'json';
    };
};

option.headers = headers;    

request.post(option, function (err, httpResponse, body) {
    if (err) {
        console.error('Analysis failed:', err);
    }
    if ( returnType == 'json' ){
        console.log(JSON.stringify(body));
    } else {
        console.log(body);
    };
});
