#!/usr/bin/env node

/*
 * parse command line argument
 */

var program = require('commander');

program
    .description('Chat with a Juji bot. Does not require login.')
    .arguments('<url>')
    .option('-f, --firstName <firstName>', 'first name')
    .option('-l, --lastName [lastName]', 'last name')
    .option('-e, --email [email]', 'email address');

program.on('--help', function(){
    console.log('')
    console.log('Example:');
    console.log('  juji chat -f Mary https://juji.io/pre-chat/mycorp/3');
});

program.parse(process.argv);

var args = program.args;

if (!args.length) {
    console.error('URL is required');
    program.outputHelp();
    process.exit(1);
}

const url = args[0];

if (!program.firstName) {
    console.error('First name is required');
    program.outputHelp();
    process.exit(1);
}


/*
 * setup chat
 */

var chatInfo;
var ws;

const request = require('request-promise');
const util = require('util');

async function startChat() {

    // obtain chat information
    const options =  {
        method: 'POST',
        url: url,
        formData: {
            firstName: program.firstName
        }
    };
    const response = await request(options);
    chatInfo = JSON.parse(response);
    console.log(chatInfo);

    // setup WebSocket connection
    const WebSocket = require('isomorphic-ws');
    ws = new WebSocket(chatInfo.websocketUrl);

    // subscribe to chat messages
    ws.onopen = function open() {
        console.log('connected');

        const subFormat  = `
        subscription {
            chat(input: {
                participationId: "%s"
            }) {
                type
                role
                text
            }
        }`
        var subscription = util.format(subFormat, chatInfo.participationId);
        ws.send(JSON.stringify(subscription));
    };

    // receive and send chat messages
    ws.onmessage = function incoming(data) {
        console.log(data);

    };

    ws.onclose = function close() {
        console.log('disconnected');
    };

}

startChat().catch(error => console.error(error))
