#!/usr/bin/env node

/*
 * parse command line argument
 */

var program = require('commander');

program
    .description('Upload a CSV data file for Juji bot to use. Requires login.')
    .arguments('<file>')
    .option('-o, --operation <operation>', 'specify the operation to carry out, default is upload, another is erase', 'upload')
    .option('-i, --identifier <id>', 'a unique identifier for this data')
    .option('-e, --engagement-id [id]', 'if specified, the data is scoped to the specified engagement')
    ;

program.on('--help', function(){
    console.log('');
    console.log('Input:');
    console.log('  The input file should be in CSV format. A header with the column names is required. In addition, this client only support utf8 encoded file.');
    console.log('');
    console.log('Output:');
    console.log('  The output will be operation status in json');
    console.log('');
    console.log('Examples:');
    console.log('  juji data -i my-data-1 data-1.csv');
});

program.parse(process.argv);

var args = program.args;

if ('erase' != program.operation && !args.length) {
    console.error('Input file is required');
    console.log('');
    program.outputHelp();
    process.exit(1);
}

if ('erase' != program.operation && !program.identifier) {
    console.error('Please specify an identifier for this data');
    console.log('');
    program.outputHelp();
    process.exit(1);
}

var csvFile = args[0];

/*
 * check permission
 */

const Preferences = require('preferences');

const prefs = new Preferences('io.juji.client');

if (prefs.token == null) {
    console.error('Please \'juji login\' first')
    process.exit(1);
}

/*
 * send file to upload
 */

const fs = require('fs');

const GraphQLClient = require('graphql-request').GraphQLClient;

const graphQLClient = new GraphQLClient(prefs.graphqlUrl, {
    headers: {
        authorization: 'Bearer ' + prefs.token
    }
})

async function uploadCSV(csvStr) {

    const query = `
    mutation updateDataCSV($input: UpdateDataCSVInput!){
        updateDataCSV(input: $input) {
            message
            success
        }
    }`;

    // TODO handle engagementId
    var input = {csv: csvStr, identifier: program.identifier};

    response = await graphQLClient.request(query, {input: input});

    console.log(JSON.stringify(response, undefined, 2));

}

async function eraseData() {

    const query = `
    mutation eraseData($input: EraseDataInput!){
        eraseData(input: $input) {
            message
            success
        }
    }`;

    // TODO handle identifiers
    var input = {scope: ':all'};

    response = await graphQLClient.request(query, {input: input});

    console.log(JSON.stringify(response, undefined, 2));

}


if ('erase' == program.operation) {

    eraseData().catch(error => console.error(error));

} else {

    fs.readFile(csvFile, 'utf8', function (err, data) {
        if (err) throw err;

        const csvStr = data.toString();

        uploadCSV(csvStr).catch(error => console.error(error));

    })
}
