#!/usr/bin/env node

var program = require('commander');

program
    .description('Issue GraphQL query to Juji')
    .arguments('<query>')
    .option('-v, --variables [variables]', 'supplies GraphQL variables in JSON format');

program.on('--help', function(){
    console.log('');
    console.log('Examples:');
    console.log('  juji query \'{getBrands {name}}\'');
    console.log('  juji query -v \'{\"brandName\": \"mycorp"}\' \'query engagements($brandName: String!) {getEngagementsByBrand(brandName: $brandName) {name order status}}\'');
});

program.parse(process.argv);

var args = program.args;

if (!args.length) {
    console.error('Query is required');
    console.log('');
    program.outputHelp();
    process.exit(1);
}

var query = args[0];

const Preferences = require('preferences');

const prefs = new Preferences('io.juji.client');

if (prefs.endpoint == null) {
    console.error('Please \'juji login\' first')
    console.log('');
    program.outputHelp();
    process.exit(1);
}

const GraphQLClient = require('graphql-request').GraphQLClient;

async function issueQuery() {


    const graphQLClient = new GraphQLClient(prefs.endpoint, {
        headers: {
            authorization: 'Bearer ' + prefs.token,
        },
    })

    const variables = program.variables;

    var data;
    if (variables == null) {
        data = await graphQLClient.request(query);
    } else {
        data = await graphQLClient.request(query, JSON.parse(variables));
    }

    console.log(JSON.stringify(data, undefined, 2));

}

issueQuery().catch(error => console.error(error))
